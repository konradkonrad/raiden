version: 2

settings:
  gas_price: "fast"
  services:
    pfs:
      url: "{{ pfs_with_fee }}"
    udc:
      enable: true
      token:
        deposit: true
        balance_per_node: "{{ ms_reward_with_margin + 200 * 2 * pfs_fee}}"

token:
  address: "{{ transfer_token }}"
  balance_fund: 20

nodes:
  count: 3
  raiden_version: local

  default_options:
    gas-price: fast
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: "{{ pfs_fee }}"
    enable-monitoring: true
    proportional-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-imbalance-fee:
      - "{{ transfer_token }}"
      - 0
    default-settle-timeout: "{{ settlement_timeout_min }}"
    default-reveal-timeout: 20
  node_options:
    0:
      matrix-server: "{{ matrix_servers[0] }}"
    1:
      matrix-server: "{{ matrix_servers[1] }}"
    2:
      matrix-server: "{{ matrix_servers[2] }}"

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 10, expected_http_status: 201}
            - open_channel: {from: 1, to: 2, total_deposit: 10, expected_http_status: 201}
      - parallel:
          name: "Assert after channel openings"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 10, balance: 10, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 10, balance: 10, state: "opened"}
      - serial:
          name: "Make transfer in the direction with no deposit (should fail) - No path available"
          tasks:
            - transfer: {from: 2, to: 0, amount: 1, lock_timeout: 30, expected_http_status: 409}
      - parallel:
          name: "Enable MSs between node 1 and 2 (will be used later in the scenario)"
          tasks:
            - store_channel_info: {from: 1, to: 2, key: "MS Test Channel 1-2"}
      - serial:
          name: "Make 10 transfers from 0 to 2"
          repeat: 10
          tasks:
            - transfer: {from: 0, to: 2, amount: 1, lock_timeout: 30}
      - serial:
          name: "Assert after 10 payments from 0 to 2"
          tasks:
            - wait: 300
            - assert_sum: {from: 0, balance_sum: 0}
            - assert_sum: {from: 1, balance_sum: 10}
            - assert_sum: {from: 2, balance_sum: 10}
      - serial:
          name: "Check that IOUs exist after the payments"
          tasks:
            # Add a wait until all ious are processed correctly
            - wait: 100
            - assert_pfs_history: {source: 0, target: 2, request_count: 10}
            - assert_pfs_iou: {source: 0, amount: "{{ 10 * pfs_fee }}" }
      - serial:
          name: "Close all channel from 0 to 1"
          tasks:
            - close_channel: {from: 0, to: 1}
      - serial:
          name: "Assert after closing channel between 0 and 1"
          tasks:
            - wait: 100
            - assert_events:
                contract_name: "TokenNetwork"
                event_name: "ChannelClosed"
                num_events: 1
                event_args: {closing_participant: 0}
            - assert_events:
                contract_name: "TokenNetwork"
                event_name: "NonClosingBalanceProofUpdated"
                num_events: 1
                event_args: {closing_participant: 0}
            - assert: {from: 0, to: 1, state: "closed"}
            # Make sure that channel between 0 and 1 is also settled
            - wait_blocks: "{{ settlement_timeout_min }}"
      - serial:
          name: "Close channel between 1 and 2 while 2 is offline"
          tasks:
            - stop_node: 2
            - close_channel: {from: 1, to: 2}
            ## Wait for channel to be closed
            - wait_blocks: 1
            - assert: {from: 1, to: 2, state: "closed"}
            - assert_events:
                contract_name: "TokenNetwork"
                event_name: "ChannelClosed"
                num_events: 1
                event_args: {closing_participant: 1}

            ## The MS reacts within the settle_timeout
            - wait_blocks: "{{ settlement_timeout_min }}"
            - assert_events:
                contract_name: "TokenNetwork"
                event_name: "NonClosingBalanceProofUpdated"
                num_events: 1
                event_args: {closing_participant: 1}

            ## Monitored channel must be settled before the monitoring service can claim its reward.
            ## To make sure the transactions gets mined in time, 5 additional blocks are added
            ## Monitoring Service only reacts for the second closing.
            - wait_blocks: 5
            - assert_ms_claim: {channel_info_key: "MS Test Channel 1-2"}
